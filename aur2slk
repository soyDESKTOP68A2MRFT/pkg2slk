#!/bin/bash

# Verificar dependencias
for cmd in git tar makepkg; do
    if ! command -v $cmd &>/dev/null; then
        echo "Error: '$cmd' no está instalado."
        exit 1
    fi
done

# Mostrar ayuda
function mostrar_ayuda() {
    echo "Uso:"
    echo "  $0 <nombre_paquete_aur_o_url>  - Instalar un paquete desde AUR"
    echo "  $0 --buscar <término>          - Buscar paquetes en AUR"
    exit 0
}

# Verificar argumentos
if [ "$1" == "--buscar" ]; then
    if [ -z "$2" ]; then
        echo "Error: Debes especificar un término de búsqueda."
        exit 1
    fi
    echo "Buscando paquetes en AUR que coincidan con: $2"
    /home/joni/arch_2_slk/srcsearch "$2"
    exit 0
elif [ $# -ne 1 ]; then
    mostrar_ayuda
fi

# Variables
AUR_PACKAGE="$1"
PACKAGE_NAME=$(basename "$AUR_PACKAGE" .git)
WORK_DIR="/tmp/$PACKAGE_NAME"
SLACKBUILD_DIR="$PACKAGE_NAME-slackbuild"

# Clonar el repositorio AUR
echo "Clonando el repositorio AUR: $AUR_PACKAGE"
git clone "$AUR_PACKAGE" "$WORK_DIR" || {
    echo "Error al clonar el repositorio."
    exit 1
}

# Entrar al directorio clonado
cd "$WORK_DIR" || {
    echo "Error: no se pudo acceder al directorio '$WORK_DIR'."
    exit 1
}

# Crear un SlackBuild
echo "Creando SlackBuild en: $SLACKBUILD_DIR"
mkdir -p "$SLACKBUILD_DIR"
cp -r "$WORK_DIR"/* "$SLACKBUILD_DIR/"
cd "$SLACKBUILD_DIR" || exit 1

# Construir el paquete
if makepkg -si; then
    echo "Paquete construido e instalado exitosamente."
else
    echo "Error durante la construcción del paquete."
    exit 1
fi

# Limpiar
echo "Limpiando archivos temporales..."
rm -rf "$WORK_DIR"
echo "Proceso completado."
